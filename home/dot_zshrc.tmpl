{{- if eq .chezmoi.os "linux" }}
# Ubuntu specific settings
export PATH="$HOME/.local/bin:$PATH"
export GOPATH="$HOME/go"
export PATH="$PATH:$GOPATH/bin" 
export PATH="$PATH:$HOME/.cargo/bin" 
export PATH="$PATH:$HOME/.local/share/mise/shims"

{{- end }}

# 補完システムの初期化（必須）

# sheldon (plugin manager)
if command -v sheldon >/dev/null 2>&1; then
    eval "$(sheldon source)"
fi

# Enable Powerlevel10k instant prompt
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

# LS_COLORSを設定しておく
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
 

# 補完の基本設定
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# 補完候補のグループ化
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '%F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format '%F{purple}-- %d --%f'
zstyle ':completion:*:warnings' format '%F{red}No matches found%f'

# プロセス補完の改善
zstyle ':completion:*:processes' command 'ps -u $USER -o pid,user,comm -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'

# ホスト名補完
zstyle ':completion:*:ssh:*' hosts off
zstyle ':completion:*:scp:*' hosts off

# fzf-tab 用の設定
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:complete:ls:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:complete:*:*' fzf-preview 'less ${(Q)realpath}'
zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept
zstyle ':fzf-tab:*' use-fzf-default-opts yes

# Git関連の補完改善
zstyle ':completion:*:git-checkout:*' sort false
zstyle ':completion:*:git-*:*' group-order heads-local heads-remote branches-local branches-remote

# 大文字小文字を区別しない補完
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# 補完候補の表示順序
zstyle ':completion:*' file-sort modification
zstyle ':completion:*' list-dirs-first true

# 不要なファイルを補完候補から除外
zstyle ':completion:*' ignored-patterns '*.pyc' '*.pyo' '*.bak' '*.swp' '*~'

# zsh-autosuggestions の設定
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=60'
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20

# 補完候補が多いときにスクロール
bindkey '^I' expand-or-complete
# ファイル補完候補に色を付ける

# Common abbreviations
# abbr 'll'='ls -la'
# abbr 'g'='git'

{{- if env "REMOTE_CONTAINERS" }}
# DevContainer specific settings
export SHELL=/usr/bin/zsh
export EDITOR=code
export VISUAL=code

# DevContainer specific abbreviations
# abbr 'dc'='docker-compose'
# abbr 'k'='kubectl'
{{- end }}

{{- if env "WSL_DISTRO_NAME" }}
# WSL specific settings
export BROWSER="wslview"
export DISPLAY=:0
export LIBGL_ALWAYS_INDIRECT=1

# # WSL specific abbreviations
# abbr 'explorer'='explorer.exe'
# abbr 'code'='code-insiders'
# abbr 'open'='wslview'
# abbr 'pbcopy'='clip.exe'
# abbr 'pbpaste'='powershell.exe -command "Get-Clipboard" | tr -d "\r"'

# WSL specific functions
winpath() {
    wslpath -w "$1"
}

# WSL Docker integration (if using Docker Desktop for Windows)
export DOCKER_HOST="tcp://localhost:2375"
{{- end }}

{{- if eq .chezmoi.os "darwin" }}
# macOS specific settings
if [[ $(uname -m) == 'arm64' ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
else
    eval "$(/usr/local/bin/brew shellenv)"
fi

# macOS specific abbreviations
# abbr 'showfiles'='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder'
# abbr 'hidefiles'='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder'
# abbr 'cleanup'='find . -type f -name "*.DS_Store" -ls -delete'
{{- end }}

# {{- if eq .chezmoi.os "linux" }}

# Ubuntu specific abbreviations
# abbr 'update'='sudo apt update && sudo apt upgrade -y'
# abbr 'install'='sudo apt install -y'
# abbr 'remove'='sudo apt remove'
# abbr 'clean'='sudo apt autoremove && sudo apt autoclean'

# {{- end }}

# Common settings
export EDITOR="cursor"
export VISUAL="cursor"

bindkey '^ ' autosuggest-accept

# Load p10k config
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# abbr global settings
# グローバル設定を追加する場合は、プラグインロード後に設定してください
# abbr_global_flags=(
#     '--global'      # グローバルな略語を作成
#     '--quiet'       # 出力を抑制
#     '--space'       # スペースを自動追加
# )

# # abbr initialization
# if ! type abbr &>/dev/null; then
#     echo "zsh-abbr plugin not found. Some features may not work."
# fi
#  abbr git m='commit -m "%"'

# # Show current dotfiles profile
# abbr 'dots-current'='echo "Current profile: $CHEZMOI_USAGE"'

# ghq + fzf
function ghq-fzf() {
  local src=$(ghq list | fzf --preview "ls -laTh $(ghq root)/{}")
  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/$src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^g' ghq-fzf


# # Atuin設定
# eval "$(atuin init zsh)"
# 
# # カスタム設定
# export ATUIN_NOBIND="true"
# bindkey '^r' _atuin_search_widget
# 
# # 同期設定（オプション）
# # atuin login -u username
# # atuin sync 

# $ ghcr my-super-program --public -d 'The best library ever!'
ghcr() {
  gh repo create "$@"
  ghq get "$1"
  code "$(ghq list --full-path -e "$1")"
}
